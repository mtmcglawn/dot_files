# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# set the XDG variables if they don't exist
if [ ! $XDG_CONFIG_HOME ] && [ -d $HOME/.config ]; then
	export XDG_CONFIG_HOME="$HOME/.config"
	export XDG_CACHE_HOME="$XDG_CONFIG_HOME/.cache"
	export XDG_DATA_HOME="$XDG_CONFIG_HOME/.share"
	export XDG_RUNTIME_HOME="$XDG_CONFIG_HOME/.share"
fi

# set the location of vimrc
export VIMINIT=" set nocp | source ${XDG_CONFIG_HOME:-$HOME/.config}/vim/init.vim"

# set the history file location
if [ $XDG_CONFIG_HOME ]; then
	HISTFILE="$XDG_CONFIG_HOME/bash/bash_history"
else
	HISTFILE="$HOME/.bash_history"
fi

# allow others to read/write my files
umask 0002 # Note: Inverse of typical permissions. I.e., 0002 sets a new file to 0775

# ?allow core?
ulimit -c unlimited
ulimit -s unlimited

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# if command is a directory name, cd into that directory
shopt -s autocd

# allows for "**" to be used during
# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=10000
HISTFILESIZE=10000

#Setting the DISPLAY variable
# export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0
export DISPLAY=:0.0

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# path variables
export PATH=''${PATH}

if [ ${HOSTNAME} == 'server' ] && [ ${SHLVL} == "#" ]; then
	echo 'on server'
	newgrp group
	exit
#elif
fi

# for setting the cli to not be case sensitive
bind "set completion-ignore-case on"
#shopt -s nocaseglob

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# we loke colors in out terminal
#export TERM='xterm-256color'
# COLORSCHEMES
## first number represents light(1) or dark(0)
BLACK="\e[0;30m"
RED="\e[0;31m"
GREEN="\e[0;32m"
BROWN="\e[0;33m"
BLUE="\e[0;34m"
PURPLE="\e[0;35m"
CYAN="\e[0;36m"
WHITE="\e[0;37m"
END="\e[m" # This is needed at the end.

#export PS1="\[$WHITE\][\[$GREEN\]\w\[$WHITE\]][\[$BLUE\]\h\[$WHITE\]]#\[$END\]"

# clean up colors
BLACK=""
RED=""
GREEN=""
BROWN=""
BLUE=""
PURPLE=""
CYAN=""
WHITE=""
END=""

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:local=01:quote=01'

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# check the window size after each command and, if necessary, update the values
# of LINES and COLUMNS.
shopt -s checkwinsize
#shopt -s globstar

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

#enables ssh-agent
env=~/.ssh/agent.env
agent_load_env () { test -f "$env" && . "$env" >| /dev/null ; }
agent_start () {
	(umask 077; ssh-agent >| "$env")
	. "$env" >| /dev/null ; }
agent_load_env

# agent_run_state: 0=agent running w/ key; 1=agent w/o key; 2=agent not running
agent_run_state=$(ssh-add -l >| /dev/null 2>&1; echo $?)
if [ ! "$SSH_AUTH_SOCK" ] || [ $agent_run_state = 2 ]; then
	# if [ echo $szPassword == "\n" ]; then
	#         read -p "Password: " -s szPassword
	# fi
       	agent_start
	ssh-add
	# printf "%s\n" "$szPassword" | ssh-add
elif [ "$SSH_AUTH_SOCK" ] && [ $agent_run_state = 1 ]; then
	# if [ echo $szPassword == "\n" ]; then
	#         read -p "Password: " -s szPassword
	# fi
	# printf "%s\n" "$szPassword" | ssh-add
	ssh-add
fi
unset env

# Next line is used to enable hidden file search capabilities to fzf
export FZF_DEFAULT_COMMAND="find . -type f -print -o -type l -print 2> /dev/null | sed s/^..//"

#Powerline
if [ -f /usr/share/powerline/bindings/bash/powerline.sh ]; then
	powerline-daemon -q
	POWERLINE_BASH_CONTINUATION=1
	POWERLINE_BASH_SELECT=1
	. /usr/share/powerline/integrations/powerline.sh
fi

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f $XDG_CONFIG_HOME/bash/bash_aliases ]; then
    . $XDG_CONFIG_HOME/bash/bash_aliases
elif [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# Used to make sure you have bashrc when ssh'ing
if [ ! -f ~/.bash_profile ]; then
	echo "# This is used to source .bashrc to other servers." > ~/.bash_profile
	echo "" >> ~/.bash_profile
	echo "if [ -f ~/.bashrc ]; then" >> ~/.bash_profile
	echo "  . ~/.bashrc" >> ~/.bash_profile
	echo "fi" >> ~/.bash_profile
fi
